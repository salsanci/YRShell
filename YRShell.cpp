


#include "YRShell.h"

/*
 
 : ps? s' PARAMETER STACK: ' .str psd? 0!= [ psd? { dup ps@ . 1 - dup 0== } drop ] cr lf
 : rs? s'    RETURN STACK: ' .str rsd? 0!= [ rsd? 1 - { dup rs@ . 1 - dup -1 == } drop ] cr lf
 : cs? s'   COMPILE STACK: ' .str csd? 0!= [ csd? 1 - { dup cs@ . 1 - dup -1 == } drop ] cr lf
 : st? ps? rs? cs?
 
 : _cd0 s' \r\nstatic uint16_t ' .str
 : _cd1 _cd0 s' compiledDictionaryData[] = {\r\n' .str
 : _cx1 _cd0 s' compiledExtensionDictionaryData[] = {\r\n' .str
 : _cd2 dup 0xF & 0== [ crlf s' // ' .str dup .wx crlf ]
 : _cd3 0 { _cd2 dup getCurrentDictionary .wx s' , ' .str 1 + dup getCurrentDictionaryEnd >= } drop
 : _cd4 getCurrentDictionaryEnd 0!= [ _cd3 crlf ] s' };\r\n' .str
 : _cd5 s' YRShellCompiledDictionary ' .str
 : _cd6 s' compiledDictionary( compiledDictionaryData, ' .str
 : _cx6 s' compiledExtensionDictionary( compiledExtensionDictionaryData, ' .str
 : _cd7 getCurrentDictionaryLastWord .wx s' , ' .str getCurrentDictionaryEnd .wx
 : _cd8 _cd1 _cd4 _cd5 _cd6 _cd7  s' , YRSHELL_DICTIONARY_COMPILED);\r\n' .str
 : _cx8 _cx1 _cd4 _cd5 _cx6 _cd7 s' , YRSHELL_DICTIONARY_EXTENSION_COMPILED);\r\n' .str
 : compileDictionary _cd8
 : compileExtensionDictionary _cx8
 
 : dictInvalid 0xFFFF
 : wl_ rot dup [ crlf ] 0 == rot rot
 : wl 0 0 dictInvalid { nextEntry over .bx dup .wx 2dup entryToken .wx 2dup .entryName wl_ dup dictInvalid == } 2drop drop
 
 
 
 
 
 
 
 
 
 
 
YRShell Version 0.1
 
 HELO> : ps? s' PARAMETER STACK: ' .str psd? 0!= [ psd? { dup ps@ . 1 - dup 0== } drop ] cr lf
 : rs? s'    RETURN STACK: ' .str rsd? 0!= [ rsd? 1 - { dup rs@ . 1 - dup -1 == } drop ] cr lf
 : cs? s'   COMPILE STACK: ' .str csd? 0!= [ csd? 1 - { dup cs@ . 1 - dup -1 == } drop ] cr lf
 : st? ps? rs? cs?
 : ps? s' PARAMETER STACK: ' .str psd? 0!= [ psd? { dup ps@ . 1 - dup 0== } drop ] cr lf
 
 HELO> : rs? s'    RETURN STACK: ' .str rsd? 0!= [ rsd? 1 - { dup rs@ . 1 - dup -1 == } drop ] cr lf
 
 HELO> : cs? s'   COMPILE STACK: ' .str csd? 0!= [ csd? 1 - { dup cs@ . 1 - dup -1 == } drop ] cr lf
 
 HELO> : st? ps? rs? cs?
 
 HELO> : _cd0 s' \r\nstatic uint16_t ' .str
 : _cd1 _cd0 s' compiledDictionaryData[] = {\r\n' .str
 : _cx1 _cd0 s' compiledExtensionDictionaryData[] = {\r\n' .str
 : _cd2 dup 0xF & 0== [ crlf s' // ' .str dup .wx crlf ]
 : _cd3 0 { _cd2 dup getCurrentDictionary .wx s' , ' .str 1 + dup getCurrentDictionaryEnd >= } drop
 : _cd4 getCurrentDictionaryEnd 0!= [ _cd3 crlf ] s' };\r\n' .str
 : _cd5 s'YRShellCompiledDictionary ' .str
 : _cd6 s' compiledDictionary( compiledDictionaryData, ' .str
 : _cx6 s' compiledExtensionDictionary( compiledExtensionDictionaryData, ' .str
 : _cd7 getCurrentDictionaryLastWord .wx s' , ' .str getCurrentDictionaryEnd .wx
 : _cd8 _cd1 _cd4 _cd5 _cd6 _cd7  s' , YRSHELL_DICTIONARY_COMPILED);\r\n' .str
 : _cx8 _cx1 _cd4 _cd5 _cx6 _cd7 s' , YRSHELL_DICTIONARY_EXTENSION_COMPILED);\r\n' .str
 : compileDictionary _cd8
 : compileExtensionDictionary _cx8
 : _cd0 s' \r\nstatic uint16_t ' .str
 
 HELO> : _cd1 _cd0 s' compiledDictionaryData[] = {\r\n' .str
 
 HELO> : _cx1 _cd0 s' compiledExtensionDictionaryData[] = {\r\n' .str
 
 HELO> : _cd2 dup 0xF & 0== [ crlf s' // ' .str dup .wx crlf ]
 
 HELO> : _cd3 0 { _cd2 dup getCurrentDictionary .wx s' , ' .str 1 + dup getCurrentDictionaryEnd >= } drop
 
 HELO> : _cd4 getCurrentDictionaryEnd 0!= [ _cd3 crlf ] s' };\r\n' .str
 
 HELO> : _cd5 s'YRShellCompiledDictionary ' .str
 
 HELO> : _cd6 s' compiledDictionary( compiledDictionaryData, ' .str
 
 HELO> : _cx6 s' compiledExtensionDictionary( compiledExtensionDictionaryData, ' .str
 
 HELO> : _cd7 getCurrentDictionaryLastWord .wx s' , ' .str getCurrentDictionaryEnd .wx
 
 HELO> : _cd8 _cd1 _cd4 _cd5 _cd6 _cd7  s' , YRSHELL_DICTIONARY_COMPILED);\r\n' .str
 
 HELO> : _cx8 _cx1 _cd4 _cd5 _cx6 _cd7 s' , YRSHELL_DICTIONARY_EXTENSION_COMPILED);\r\n' .str
 
 HELO> : compileDictionary _cd8
 
 HELO> : compileExtensionDictionary _cx8
 
 HELO> : dictInvalid 0xFFFF
 : wl_ rot dup [ crlf ] 0 == rot rot
 : wl 0 0 dictInvalid { nextEntry over .bx dup .wx 2dup entryToken .wx 2dup .entryName wl_ dup dictInvalid == } 2drop drop
 : dictInvalid 0xFFFF
 
 HELO> : wl_ rot dup [ crlf ] 0 == rot rot
 
 HELO> : wl 0 0 dictInvalid { nextEntry over .bx dup .wx 2dup entryToken .wx 2dup .entryName wl_ dup dictInvalid == } 2drop drop
 
 HELO>
 HELO>compileDictionary
 compileDictionary
 
 static uint16_t compiledDictionaryData[] = {
 
 // 0x0000
 0xFFFF , 0x7370 , 0x003F , 0xC016 , 0x4150 , 0x4152 , 0x454D , 0x4554 , 0x2052 , 0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC037 , 0xC03F ,
 // 0x0010
 0xC01D , 0xE01E , 0xC037 , 0xC01E , 0xC03A , 0xC00C , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03E , 0xC01D , 0xE013 , 0xC022 , 0xC003 , 0xC004 ,
 // 0x0020
 0xC001 , 0x0000 , 0x7372 , 0x003F , 0xC016 , 0x2020 , 0x5220 , 0x5445 , 0x5255 , 0x204E , 0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC038 ,
 // 0x0030
 0xC03F , 0xC01D , 0xE044 , 0xC038 , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03B , 0xC00C , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC00B , 0xFFFF ,
 // 0x0040
 0xC031 , 0xC01D , 0xE037 , 0xC022 , 0xC003 , 0xC004 , 0xC001 , 0x0021 , 0x7363 , 0x003F , 0xC016 , 0x2020 , 0x4F43 , 0x504D , 0x4C49 , 0x2045 ,
 // 0x0050
 0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC039 , 0xC03F , 0xC01D , 0xE06A , 0xC039 , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03C , 0xC00C ,
 // 0x0060
 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC00B , 0xFFFF , 0xC031 , 0xC01D , 0xE05D , 0xC022 , 0xC003 , 0xC004 , 0xC001 , 0x0047 , 0x7473 , 0x003F ,
 // 0x0070
 0xE003 , 0xE024 , 0xE04A , 0xC001 , 0x006D , 0x635F , 0x3064 , 0x0000 , 0xC016 , 0x0A0D , 0x7473 , 0x7461 , 0x6369 , 0x7520 , 0x6E69 , 0x3174 ,
 // 0x0080
 0x5F36 , 0x2074 , 0x0000 , 0xC012 , 0xC001 , 0x0074 , 0x635F , 0x3164 , 0x0000 , 0xE078 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x6944 ,
 // 0x0090
 0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x6144 , 0x6174 , 0x5D5B , 0x3D20 , 0x7B20 , 0x0A0D , 0x0000 , 0xC012 , 0xC001 , 0x0085 , 0x635F , 0x3178 ,
 // 0x00A0
 0x0000 , 0xE078 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x7845 , 0x6574 , 0x736E , 0x6F69 , 0x446E , 0x6369 , 0x6974 , 0x6E6F , 0x7261 ,
 // 0x00B0
 0x4479 , 0x7461 , 0x5B61 , 0x205D , 0x203D , 0x0D7B , 0x000A , 0xC012 , 0xC001 , 0x009D , 0x635F , 0x3264 , 0x0000 , 0xC01E , 0xC009 , 0x000F ,
 // 0x00C0
 0xC02C , 0xC03E , 0xC01D , 0xE0CC , 0xC005 , 0xC016 , 0x2F2F , 0x0020 , 0xC012 , 0xC01E , 0xC011 , 0xC005 , 0xC001 , 0x00B9 , 0x635F , 0x3364 ,
 // 0x00D0
 0x0000 , 0xA001 , 0xE0BD , 0xC01E , 0xC044 , 0xC011 , 0xC016 , 0x202C , 0x0000 , 0xC012 , 0xC009 , 0x0001 , 0xC027 , 0xC01E , 0xC045 , 0xC033 ,
 // 0x00E0
 0xC01D , 0xE0D2 , 0xC022 , 0xC001 , 0x00CD , 0x635F , 0x3464 , 0x0000 , 0xC045 , 0xC03F , 0xC01D , 0xE0EE , 0xE0D1 , 0xC005 , 0xC016 , 0x3B7D ,
 // 0x00F0
 0x0A0D , 0x0000 , 0xC012 , 0xC001 , 0x00E4 , 0x635F , 0x3564 , 0x0000 , 0xC016 , 0x6853 , 0x6C65 , 0x436C , 0x6D6F , 0x6970 , 0x656C , 0x4464 ,
 // 0x0100
 0x6369 , 0x6974 , 0x6E6F , 0x7261 , 0x2079 , 0x0000 , 0xC012 , 0xC001 , 0x00F4 , 0x635F , 0x3664 , 0x0000 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 ,
 // 0x0110
 0x6465 , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x2028 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 ,
 // 0x0120
 0x6144 , 0x6174 , 0x202C , 0x0000 , 0xC012 , 0xC001 , 0x0108 , 0x635F , 0x3678 , 0x0000 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x7845 ,
 // 0x0130
 0x6574 , 0x736E , 0x6F69 , 0x446E , 0x6369 , 0x6974 , 0x6E6F , 0x7261 , 0x2879 , 0x6320 , 0x6D6F , 0x6970 , 0x656C , 0x4564 , 0x7478 , 0x6E65 ,
 // 0x0140
 0x6973 , 0x6E6F , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x6144 , 0x6174 , 0x202C , 0x0000 , 0xC012 , 0xC001 , 0x0126 , 0x635F , 0x3764 ,
 // 0x0150
 0x0000 , 0xC046 , 0xC011 , 0xC016 , 0x202C , 0x0000 , 0xC012 , 0xC045 , 0xC011 , 0xC001 , 0x014D , 0x635F , 0x3864 , 0x0000 , 0xE089 , 0xE0E8 ,
 // 0x0160
 0xE0F8 , 0xE10C , 0xE151 , 0xC016 , 0x202C , 0x4853 , 0x4C45 , 0x5F4C , 0x4944 , 0x5443 , 0x4F49 , 0x414E , 0x5952 , 0x435F , 0x4D4F , 0x4950 ,
 // 0x0170
 0x454C , 0x2944 , 0x0D3B , 0x000A , 0xC012 , 0xC001 , 0x015A , 0x635F , 0x3878 , 0x0000 , 0xE0A1 , 0xE0E8 , 0xE0F8 , 0xE12A , 0xE151 , 0xC016 ,
 // 0x0180
 0x202C , 0x4853 , 0x4C45 , 0x5F4C , 0x4944 , 0x5443 , 0x4F49 , 0x414E , 0x5952 , 0x455F , 0x5458 , 0x4E45 , 0x4953 , 0x4E4F , 0x435F , 0x4D4F ,
 // 0x0190
 0x4950 , 0x454C , 0x2944 , 0x0D3B , 0x000A , 0xC012 , 0xC001 , 0x0176 , 0x6F63 , 0x706D , 0x6C69 , 0x4465 , 0x6369 , 0x6974 , 0x6E6F , 0x7261 ,
 // 0x01A0
 0x0079 , 0xE15E , 0xC001 , 0x0197 , 0x6F63 , 0x706D , 0x6C69 , 0x4565 , 0x7478 , 0x6E65 , 0x6973 , 0x6E6F , 0x6944 , 0x7463 , 0x6F69 , 0x616E ,
 // 0x01B0
 0x7972 , 0x0000 , 0xE17A , 0xC001 , 0x01A3 , 0x6964 , 0x7463 , 0x6E49 , 0x6176 , 0x696C , 0x0064 , 0xC009 , 0xFFFF , 0xC001 , 0x01B4 , 0x6C77 ,
 // 0x01C0
 0x005F , 0xC023 , 0xC01E , 0xC01D , 0xE1C6 , 0xC005 , 0xA001 , 0xC031 , 0xC023 , 0xC023 , 0xC001 , 0x01BE , 0x6C77 , 0x0000 , 0xA001 , 0xA001 ,
 // 0x01D0
 0xE1BB , 0xC048 , 0xC040 , 0xC010 , 0xC01E , 0xC011 , 0xC041 , 0xC04A , 0xC011 , 0xC041 , 0xC049 , 0xE1C1 , 0xC01E , 0xE1BB , 0xC031 , 0xC01D ,
 // 0x01E0
 0xE1D1 , 0xC042 , 0xC022 , 0xC001 ,
 };
YRShellCompiledDictionary compiledDictionary( compiledDictionaryData, 0x01CB , 0x01E4 , YRSHELL_DICTIONARY_COMPILED);
 
 HELO>
 */

static const FunctionEntry shellFunctions[] = {
    { (uint16_t)YRShellBase::S_CC_zero,        "0" },
    { (uint16_t)YRShellBase::S_CC_plusOne,     "1+" },
    { (uint16_t)YRShellBase::S_CC_minusOne,    "1-" },
    { (uint16_t)0, NULL}
};
static FunctionDictionary dictionaryFunction( shellFunctions, YRSHELL_DICTIONARY_FUNCTION );

/*
static uint16_t compiledDictionaryData[] = {
};YRShellCompiledDictionary compiledDictionary( compiledDictionaryData, 0xFFFF , 0x0000 , YRSHELL_DICTIONARY_COMPILED);
*/

static uint16_t compiledDictionaryData[] = {
    
    // 0x0000
    0xFFFF , 0x7370 , 0x003F , 0xC016 , 0x4150 , 0x4152 , 0x454D , 0x4554 , 0x2052 , 0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC037 , 0xC03F ,
    // 0x0010
    0xC01D , 0xE01E , 0xC037 , 0xC01E , 0xC03A , 0xC00C , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03E , 0xC01D , 0xE013 , 0xC022 , 0xC003 , 0xC004 ,
    // 0x0020
    0xC001 , 0x0000 , 0x7372 , 0x003F , 0xC016 , 0x2020 , 0x5220 , 0x5445 , 0x5255 , 0x204E , 0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC038 ,
    // 0x0030
    0xC03F , 0xC01D , 0xE044 , 0xC038 , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03B , 0xC00C , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC00B , 0xFFFF ,
    // 0x0040
    0xC031 , 0xC01D , 0xE037 , 0xC022 , 0xC003 , 0xC004 , 0xC001 , 0x0021 , 0x7363 , 0x003F , 0xC016 , 0x2020 , 0x4F43 , 0x504D , 0x4C49 , 0x2045 ,
    // 0x0050
    0x5453 , 0x4341 , 0x3A4B , 0x0020 , 0xC012 , 0xC039 , 0xC03F , 0xC01D , 0xE06A , 0xC039 , 0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC03C , 0xC00C ,
    // 0x0060
    0xC009 , 0x0001 , 0xC028 , 0xC01E , 0xC00B , 0xFFFF , 0xC031 , 0xC01D , 0xE05D , 0xC022 , 0xC003 , 0xC004 , 0xC001 , 0x0047 , 0x7473 , 0x003F ,
    // 0x0070
    0xE003 , 0xE024 , 0xE04A , 0xC001 , 0x006D , 0x635F , 0x3064 , 0x0000 , 0xC016 , 0x0A0D , 0x7473 , 0x7461 , 0x6369 , 0x7520 , 0x6E69 , 0x3174 ,
    // 0x0080
    0x5F36 , 0x2074 , 0x0000 , 0xC012 , 0xC001 , 0x0074 , 0x635F , 0x3164 , 0x0000 , 0xE078 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x6944 ,
    // 0x0090
    0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x6144 , 0x6174 , 0x5D5B , 0x3D20 , 0x7B20 , 0x0A0D , 0x0000 , 0xC012 , 0xC001 , 0x0085 , 0x635F , 0x3178 ,
    // 0x00A0
    0x0000 , 0xE078 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x7845 , 0x6574 , 0x736E , 0x6F69 , 0x446E , 0x6369 , 0x6974 , 0x6E6F , 0x7261 ,
    // 0x00B0
    0x4479 , 0x7461 , 0x5B61 , 0x205D , 0x203D , 0x0D7B , 0x000A , 0xC012 , 0xC001 , 0x009D , 0x635F , 0x3264 , 0x0000 , 0xC01E , 0xC009 , 0x000F ,
    // 0x00C0
    0xC02C , 0xC03E , 0xC01D , 0xE0CC , 0xC005 , 0xC016 , 0x2F2F , 0x0020 , 0xC012 , 0xC01E , 0xC011 , 0xC005 , 0xC001 , 0x00B9 , 0x635F , 0x3364 ,
    // 0x00D0
    0x0000 , 0xA001 , 0xE0BD , 0xC01E , 0xC044 , 0xC011 , 0xC016 , 0x202C , 0x0000 , 0xC012 , 0xC009 , 0x0001 , 0xC027 , 0xC01E , 0xC045 , 0xC033 ,
    // 0x00E0
    0xC01D , 0xE0D2 , 0xC022 , 0xC001 , 0x00CD , 0x635F , 0x3464 , 0x0000 , 0xC045 , 0xC03F , 0xC01D , 0xE0EE , 0xE0D1 , 0xC005 , 0xC016 , 0x3B7D ,
    // 0x00F0
    0x0A0D , 0x0000 , 0xC012 , 0xC001 , 0x00E4 , 0x635F , 0x3564 , 0x0000 , 0xC016 , 0x6853 , 0x6C65 , 0x436C , 0x6D6F , 0x6970 , 0x656C , 0x4464 ,
    // 0x0100
    0x6369 , 0x6974 , 0x6E6F , 0x7261 , 0x2079 , 0x0000 , 0xC012 , 0xC001 , 0x00F4 , 0x635F , 0x3664 , 0x0000 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 ,
    // 0x0110
    0x6465 , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x2028 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 ,
    // 0x0120
    0x6144 , 0x6174 , 0x202C , 0x0000 , 0xC012 , 0xC001 , 0x0108 , 0x635F , 0x3678 , 0x0000 , 0xC016 , 0x6F63 , 0x706D , 0x6C69 , 0x6465 , 0x7845 ,
    // 0x0130
    0x6574 , 0x736E , 0x6F69 , 0x446E , 0x6369 , 0x6974 , 0x6E6F , 0x7261 , 0x2879 , 0x6320 , 0x6D6F , 0x6970 , 0x656C , 0x4564 , 0x7478 , 0x6E65 ,
    // 0x0140
    0x6973 , 0x6E6F , 0x6944 , 0x7463 , 0x6F69 , 0x616E , 0x7972 , 0x6144 , 0x6174 , 0x202C , 0x0000 , 0xC012 , 0xC001 , 0x0126 , 0x635F , 0x3764 ,
    // 0x0150
    0x0000 , 0xC046 , 0xC011 , 0xC016 , 0x202C , 0x0000 , 0xC012 , 0xC045 , 0xC011 , 0xC001 , 0x014D , 0x635F , 0x3864 , 0x0000 , 0xE089 , 0xE0E8 ,
    // 0x0160
    0xE0F8 , 0xE10C , 0xE151 , 0xC016 , 0x202C , 0x4853 , 0x4C45 , 0x5F4C , 0x4944 , 0x5443 , 0x4F49 , 0x414E , 0x5952 , 0x435F , 0x4D4F , 0x4950 ,
    // 0x0170
    0x454C , 0x2944 , 0x0D3B , 0x000A , 0xC012 , 0xC001 , 0x015A , 0x635F , 0x3878 , 0x0000 , 0xE0A1 , 0xE0E8 , 0xE0F8 , 0xE12A , 0xE151 , 0xC016 ,
    // 0x0180
    0x202C , 0x4853 , 0x4C45 , 0x5F4C , 0x4944 , 0x5443 , 0x4F49 , 0x414E , 0x5952 , 0x455F , 0x5458 , 0x4E45 , 0x4953 , 0x4E4F , 0x435F , 0x4D4F ,
    // 0x0190
    0x4950 , 0x454C , 0x2944 , 0x0D3B , 0x000A , 0xC012 , 0xC001 , 0x0176 , 0x6F63 , 0x706D , 0x6C69 , 0x4465 , 0x6369 , 0x6974 , 0x6E6F , 0x7261 ,
    // 0x01A0
    0x0079 , 0xE15E , 0xC001 , 0x0197 , 0x6F63 , 0x706D , 0x6C69 , 0x4565 , 0x7478 , 0x6E65 , 0x6973 , 0x6E6F , 0x6944 , 0x7463 , 0x6F69 , 0x616E ,
    // 0x01B0
    0x7972 , 0x0000 , 0xE17A , 0xC001 , 0x01A3 , 0x6964 , 0x7463 , 0x6E49 , 0x6176 , 0x696C , 0x0064 , 0xC009 , 0xFFFF , 0xC001 , 0x01B4 , 0x6C77 ,
    // 0x01C0
    0x005F , 0xC023 , 0xC01E , 0xC01D , 0xE1C6 , 0xC005 , 0xA001 , 0xC031 , 0xC023 , 0xC023 , 0xC001 , 0x01BE , 0x6C77 , 0x0000 , 0xA001 , 0xA001 ,
    // 0x01D0
    0xE1BB , 0xC048 , 0xC040 , 0xC010 , 0xC01E , 0xC011 , 0xC041 , 0xC04A , 0xC011 , 0xC041 , 0xC049 , 0xE1C1 , 0xC01E , 0xE1BB , 0xC031 , 0xC01D ,
    // 0x01E0
    0xE1D1 , 0xC042 , 0xC022 , 0xC001 ,
};
CompiledDictionary compiledDictionary( compiledDictionaryData, 0x01CB , 0x01E4 , YRSHELL_DICTIONARY_COMPILED);

#ifdef YRSHELL_DEBUG
const char *YRShellDebugStrings[] = {
    "S_CC_first",
    "S_CC_zero",
    "S_CC_plusOne",
    "S_CC_minusOne",
    "S_CC_last",
};
#endif

void YRShellBase::init() {
    YRShellInterpreter::init( );
    compiledDictionary.setInterpreter(this);
    dictionaryFunction.setInterpreter(this);
    m_dictionaryList[ YRSHELL_DICTIONARY_COMPILED_INDEX] = &compiledDictionary;
    m_dictionaryList[ YRSHELL_DICTIONARY_FUNCTION_INDEX] = &dictionaryFunction;
    
}
void YRShellBase::executeFunction( uint16_t n) {
    if( n <= S_CC_first || n >= S_CC_last) {
        YRShellInterpreter::executeFunction(n);
    } else {
#ifdef YRSHELL_DEBUG
        if( m_debugFlags & YRSHELL_DEBUG_EXECUTE) {
            outString("[");
            outString(YRShellDebugStrings[n - S_CC_first]);
            outString("]");
        }
#endif
        switch( n) {
            case S_CC_zero:
                pushParameterStack(0);
                break;
            case S_CC_plusOne:
                pushParameterStack(popParameterStack()+1);
                break;
            case S_CC_minusOne:
                pushParameterStack(popParameterStack()-1);
                break;
            default:
                shellERROR( __BASE_FILE__, __LINE__);
                break;
        }
    }
}
void YRShellBase::setPrompt( const char* prompt ) {
    m_prompt = prompt;
}

